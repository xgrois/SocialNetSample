// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SocialNetSample.Data;

#nullable disable

namespace SocialNetSample.Data.Migrations
{
    [DbContext(typeof(SocialNetDbContext))]
    [Migration("20220420093828_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("SocialNetSample.Data.BlockedUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("SYSDATETIMEOFFSET()");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TargetId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserIdA")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("uniqueidentifier")
                        .HasComputedColumnSql("case when SourceId < TargetId then SourceId else TargetId end");

                    b.Property<Guid>("UserIdB")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("uniqueidentifier")
                        .HasComputedColumnSql("case when SourceId < TargetId then TargetId else SourceId end");

                    b.HasKey("Id");

                    b.HasIndex("SourceId");

                    b.HasIndex("TargetId");

                    b.HasIndex("UserIdA", "UserIdB")
                        .IsUnique();

                    b.ToTable("BlockedUsers");

                    b.HasCheckConstraint("BlockedUsers_SourceId_neq_TargetId", "[SourceId] != [TargetId]");
                });

            modelBuilder.Entity("SocialNetSample.Data.Friend", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("SYSDATETIMEOFFSET()");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TargetId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserIdA")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("uniqueidentifier")
                        .HasComputedColumnSql("case when SourceId < TargetId then SourceId else TargetId end");

                    b.Property<Guid>("UserIdB")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("uniqueidentifier")
                        .HasComputedColumnSql("case when SourceId < TargetId then TargetId else SourceId end");

                    b.HasKey("Id");

                    b.HasIndex("SourceId");

                    b.HasIndex("TargetId");

                    b.HasIndex("UserIdA", "UserIdB")
                        .IsUnique();

                    b.ToTable("Friends");

                    b.HasCheckConstraint("Friends_SourceId_neq_TargetId", "[SourceId] != [TargetId]");
                });

            modelBuilder.Entity("SocialNetSample.Data.FriendRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("SYSDATETIMEOFFSET()");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TargetId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserIdA")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("uniqueidentifier")
                        .HasComputedColumnSql("case when SourceId < TargetId then SourceId else TargetId end");

                    b.Property<Guid>("UserIdB")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("uniqueidentifier")
                        .HasComputedColumnSql("case when SourceId < TargetId then TargetId else SourceId end");

                    b.HasKey("Id");

                    b.HasIndex("SourceId");

                    b.HasIndex("TargetId");

                    b.HasIndex("UserIdA", "UserIdB")
                        .IsUnique();

                    b.ToTable("FriendRequests");

                    b.HasCheckConstraint("FriendRequests_SourceId_neq_TargetId", "[SourceId] != [TargetId]");
                });

            modelBuilder.Entity("SocialNetSample.Data.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("SocialNetSample.Data.BlockedUser", b =>
                {
                    b.HasOne("SocialNetSample.Data.User", "Source")
                        .WithMany("BlockedUsersSource")
                        .HasForeignKey("SourceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SocialNetSample.Data.User", "Target")
                        .WithMany("BlockedUsersTarget")
                        .HasForeignKey("TargetId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Source");

                    b.Navigation("Target");
                });

            modelBuilder.Entity("SocialNetSample.Data.Friend", b =>
                {
                    b.HasOne("SocialNetSample.Data.User", "Source")
                        .WithMany("FriendsSource")
                        .HasForeignKey("SourceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SocialNetSample.Data.User", "Target")
                        .WithMany("FriendsTarget")
                        .HasForeignKey("TargetId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Source");

                    b.Navigation("Target");
                });

            modelBuilder.Entity("SocialNetSample.Data.FriendRequest", b =>
                {
                    b.HasOne("SocialNetSample.Data.User", "Source")
                        .WithMany("FriendRequestsSource")
                        .HasForeignKey("SourceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SocialNetSample.Data.User", "Target")
                        .WithMany("FriendRequestsTarget")
                        .HasForeignKey("TargetId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Source");

                    b.Navigation("Target");
                });

            modelBuilder.Entity("SocialNetSample.Data.User", b =>
                {
                    b.Navigation("BlockedUsersSource");

                    b.Navigation("BlockedUsersTarget");

                    b.Navigation("FriendRequestsSource");

                    b.Navigation("FriendRequestsTarget");

                    b.Navigation("FriendsSource");

                    b.Navigation("FriendsTarget");
                });
#pragma warning restore 612, 618
        }
    }
}
